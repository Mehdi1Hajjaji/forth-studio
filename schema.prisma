datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // Optional: use a direct connection string for migrations (Prisma Migrate)
  // Keep DATABASE_URL pointing at the pooler for runtime, and set DIRECT_URL
  // to the direct database connection host/port.
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  STUDENT
  MENTOR
  INVESTOR
  ADMIN
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
  ADVANCED
}

enum SubmissionStatus {
  QUEUED
  RUNNING
  PASSED
  FAILED
  COMPILE_ERROR
  RUNTIME_ERROR
}

enum ProjectStatus {
  PROTOTYPE
  IN_REVIEW
  LAUNCHED
  ARCHIVED
}

enum StoryStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum TagDomain {
  PROBLEM
  STORY
  PROJECT
}

enum SuggestionStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id             String      @id @default(cuid())
  username       String      @unique @default(cuid())
  email          String      @unique
  hashedPassword String?
  name           String?
  pronouns       String?
  avatarUrl      String?
  image          String?
  bio            String?
  major          String?
  graduationYear Int?
  role           Role        @default(STUDENT)
  xp             Int         @default(0)
  universityId   String?
  university     University? @relation(fields: [universityId], references: [id])
  resilienceBadgeCount    Int       @default(0)
  resilienceBadgeEarnedAt DateTime?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  submissions         Submission[]
  stories             Story[]
  projects            Project[]
  comments            Comment[]
  votes               Vote[]
  reviewedSubmissions Submission[]   @relation("SubmissionReviewer")
  notifications       Notification[]
  failPosts           FailPost[]
  failPostLikes       FailPostLike[]
  failPostComments    FailPostComment[]
  resilienceAwards    ResilienceAward[]

  followers Follow[]  @relation("userFollowers")
  following Follow[]  @relation("userFollowing")
  Problem   Problem[]
  
  accounts Account[]
  sessions Session[]

  // Code & Cry relations
  codeCryHostedSessions CodeCrySession[] @relation("CodeCryHost")
  codeCryChatMessages   ChatMessage[]    @relation("ChatMessageSender")
  helpRequests          HelpRequest[]    @relation("HelpRequester")
  chatMessageUpvotes    ChatMessageUpvote[]
  codeCryBans           CodeCryBan[]
  codeCryMutes          CodeCryMute[]

  // Karma relations
  karmaReceived UserKarma[] @relation("UserKarmaRecipient")
  karmaSent     UserKarma[] @relation("UserKarmaSender")

  // Suggestions created by this user
  challengeSuggestions ChallengeSuggestion[] @relation("ChallengeSuggestionsCreated")
}


model University {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  country     String
  city        String?
  description String?
  createdAt   DateTime @default(now())

  members  User[]
  stories  Story[]
  projects Project[]
}

model Problem {
  id            String     @id @default(cuid())
  slug          String     @unique
  title         String
  summary       String     @db.Text
  statement     String     @db.Text
  difficulty    Difficulty
  timeLimitMs   Int?
  memoryLimitKb Int?
  createdById   String?
  createdBy     User?      @relation(fields: [createdById], references: [id])
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  tags        ProblemTag[]
  testcases   Testcase[]
  submissions Submission[]
  dailyPicks  DailyPick[]
}

model DailyPick {
  id        String   @id @default(cuid())
  date      DateTime @unique
  problemId String

  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
}

model Testcase {
  id        String  @id @default(cuid())
  problemId String
  input     String
  output    String
  isSample  Boolean @default(false)

  problem Problem @relation(fields: [problemId], references: [id])
}

model Submission {
  id           String           @id @default(cuid())
  userId       String
  problemId    String
  language     String
  code         String           @db.Text
  status       SubmissionStatus @default(QUEUED)
  score        Int?
  runtimeMs    Int?
  memoryKb     Int?
  reviewerId   String?
  reviewerNote String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  user     User      @relation(fields: [userId], references: [id])
  problem  Problem   @relation(fields: [problemId], references: [id])
  reviewer User?     @relation("SubmissionReviewer", fields: [reviewerId], references: [id])
  comments Comment[]
  votes    Vote[]
}

model Story {
  id           String      @id @default(cuid())
  slug         String      @unique
  authorId     String
  universityId String?
  title        String
  excerpt      String?
  body         String      @db.Text
  status       StoryStatus @default(DRAFT)
  publishedAt  DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  author     User        @relation(fields: [authorId], references: [id])
  university University? @relation(fields: [universityId], references: [id])
  tags       StoryTag[]
  comments   Comment[]
  votes      Vote[]
}

model Project {
  id           String        @id @default(cuid())
  slug         String        @unique
  ownerId      String
  universityId String?
  title        String
  summary      String
  description  String        @db.Text
  repoUrl      String?
  demoUrl      String?
  status       ProjectStatus @default(PROTOTYPE)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  owner      User         @relation(fields: [ownerId], references: [id])
  university University?  @relation(fields: [universityId], references: [id])
  tags       ProjectTag[]
  comments   Comment[]
  votes      Vote[]
}

model Comment {
  id           String   @id @default(cuid())
  authorId     String
  storyId      String?
  projectId    String?
  submissionId String?
  body         String
  createdAt    DateTime @default(now())

  author     User        @relation(fields: [authorId], references: [id])
  story      Story?      @relation(fields: [storyId], references: [id])
  project    Project?    @relation(fields: [projectId], references: [id])
  submission Submission? @relation(fields: [submissionId], references: [id])
}

model Vote {
  id           String   @id @default(cuid())
  userId       String
  storyId      String?
  projectId    String?
  submissionId String?
  value        Int
  createdAt    DateTime @default(now())

  user       User        @relation(fields: [userId], references: [id])
  story      Story?      @relation(fields: [storyId], references: [id])
  project    Project?    @relation(fields: [projectId], references: [id])
  submission Submission? @relation(fields: [submissionId], references: [id])
}

model Notification {
  id        String    @id @default(cuid())
  userId    String
  title     String
  message   String
  readAt    DateTime?
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("userFollowing", fields: [followerId], references: [id])
  following User @relation("userFollowers", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String @unique
  expires    DateTime
  @@unique([identifier, token])
}


model FailPost {
  id             String   @id @default(cuid())
  userId         String
  projectAttempt String
  failureReason  String   @db.Text
  lessonLearned  String   @db.Text
  likesCount     Int      @default(0)
  commentsCount  Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  author   User             @relation(fields: [userId], references: [id])
  likes    FailPostLike[]
  comments FailPostComment[]
  awards   ResilienceAward[]
}

model FailPostLike {
  userId     String
  failPostId String
  createdAt  DateTime @default(now())

  user User     @relation(fields: [userId], references: [id])
  post FailPost @relation(fields: [failPostId], references: [id])

  @@id([userId, failPostId])
}

model FailPostComment {
  id         String   @id @default(cuid())
  failPostId String
  authorId   String
  body       String   @db.Text
  createdAt  DateTime @default(now())

  post   FailPost @relation(fields: [failPostId], references: [id])
  author User     @relation(fields: [authorId], references: [id])
}

model ResilienceAward {
  id              String   @id @default(cuid())
  failPostId      String
  userId          String
  engagementScore Int
  periodStart     DateTime
  periodEnd       DateTime
  createdAt       DateTime @default(now())

  post FailPost @relation(fields: [failPostId], references: [id])
  user User     @relation(fields: [userId], references: [id])

  @@unique([periodStart, periodEnd])
}



model Tag {
  id        String    @id @default(cuid())
  domain    TagDomain
  name      String
  createdAt DateTime  @default(now())

  problemTags ProblemTag[]
  storyTags   StoryTag[]
  projectTags ProjectTag[]

  @@unique([domain, name], map: "domain_name")
}

model ProblemTag {
  problemId String
  tagId     String

  problem Problem @relation(fields: [problemId], references: [id])
  tag     Tag     @relation(fields: [tagId], references: [id])

  @@id([problemId, tagId])
}

model StoryTag {
  storyId String
  tagId   String

  story Story @relation(fields: [storyId], references: [id])
  tag   Tag   @relation(fields: [tagId], references: [id])

  @@id([storyId, tagId])
}

model ProjectTag {
  projectId String
  tagId     String

  project Project @relation(fields: [projectId], references: [id])
  tag     Tag     @relation(fields: [tagId], references: [id])

  @@id([projectId, tagId])
}

/// Code & Cry live coding sessions — weekly live co-coding with chat and help requests.
model CodeCrySession {
  id            String   @id @default(cuid())
  hostId        String
  /// Unique LiveKit room name used for presenters/viewers to join
  roomName      String   @unique
  title         String
  description   String?
  isAnonymous   Boolean  @default(false)
  /// Optional scheduled time; used to show upcoming sessions
  scheduledFor  DateTime?
  startedAt     DateTime?
  endedAt       DateTime?
  /// Optional external stream or public watch URL (e.g., recording)
  streamUrl     String?
  /// Optional archived recording URL for replays/highlights
  recordingUrl  String?
  /// Chat and room controls
  isChatClosed  Boolean  @default(false)
  isViewOnly    Boolean  @default(false)
  isStuck       Boolean  @default(false)
  /// Simple code sharing state (MVP)
  codeContent   String?  @db.Text
  codeLanguage  String?  @default("plaintext")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  host          User     @relation("CodeCryHost", fields: [hostId], references: [id])
  chatMessages  ChatMessage[]
  helpRequests  HelpRequest[]
  bans          CodeCryBan[]
  mutes         CodeCryMute[]

  @@index([hostId])
  @@index([scheduledFor])
  @@index([startedAt])
  @@index([endedAt])
}

model ChatMessage {
  id          String   @id @default(cuid())
  sessionId   String
  senderId    String?
  isAnonymous Boolean  @default(false)
  senderName  String?
  message     String   @db.Text
  sentAt      DateTime @default(now())
  upvotes     Int      @default(0)

  session     CodeCrySession @relation(fields: [sessionId], references: [id])
  sender      User?          @relation("ChatMessageSender", fields: [senderId], references: [id])
  votes       ChatMessageUpvote[]

  @@index([sessionId])
  @@index([senderId])
}

model ChatMessageUpvote {
  userId     String
  messageId  String
  createdAt  DateTime @default(now())

  user    User        @relation(fields: [userId], references: [id])
  message ChatMessage @relation(fields: [messageId], references: [id])

  @@id([userId, messageId])
}

enum HelpRequestStatus {
  OPEN
  RESOLVED
}

model HelpRequest {
  id           String            @id @default(cuid())
  sessionId    String
  requesterId  String?
  isAnonymous  Boolean           @default(false)
  requesterName String?
  topic        String
  details      String?
  status       HelpRequestStatus @default(OPEN)
  createdAt    DateTime          @default(now())

  session      CodeCrySession @relation(fields: [sessionId], references: [id])
  requester    User?          @relation("HelpRequester", fields: [requesterId], references: [id])

  @@index([sessionId])
  @@index([requesterId])
}

model CodeCryBan {
  sessionId String
  userId    String
  reason    String?
  createdAt DateTime @default(now())
  createdBy String

  session CodeCrySession @relation(fields: [sessionId], references: [id])
  user    User           @relation(fields: [userId], references: [id])

  @@id([sessionId, userId])
}

model CodeCryMute {
  sessionId String
  userId    String
  reason    String?
  createdAt DateTime @default(now())
  createdBy String

  session CodeCrySession @relation(fields: [sessionId], references: [id])
  user    User           @relation(fields: [userId], references: [id])

  @@id([sessionId, userId])
}

// Lightweight social karma
model UserKarma {
  id          String   @id @default(cuid())
  recipientId String
  senderId    String
  createdAt   DateTime @default(now())
  reason      String   @db.Text

  recipient   User     @relation("UserKarmaRecipient", fields: [recipientId], references: [id], onDelete: Cascade)
  sender      User     @relation("UserKarmaSender", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([recipientId, createdAt])
  @@index([senderId, createdAt])
}

// Community challenge suggestions (admin review)
model ChallengeSuggestion {
  id           String           @id @default(cuid())
  title        String
  topic        String
  difficulty   Difficulty
  details      String           @db.Text
  status       SuggestionStatus @default(PENDING)
  createdAt    DateTime         @default(now())
  reviewedAt   DateTime?
  createdById  String

  createdBy    User             @relation("ChallengeSuggestionsCreated", fields: [createdById], references: [id], onDelete: Cascade)

  @@index([status, createdAt])
  @@index([createdById, createdAt])
}
